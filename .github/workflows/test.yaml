name: Run pytest

on:
  workflow_call:
    inputs:
      test-dir: # The pytest directory relative to service-project-dir
        required: true
        type: string
      service-project-dir: # The root of the project directory
        required: false
        type: string
      uses-mongo: # (default: false) Whether or not to launch a mongodb instance
        required: false
        type: boolean
        default: false
      mongo-version: # (default: latest) Mongodb port
        required: false
        type: string
        default: latest
      mongo-port: # (default: 27017) Mongodb port
        required: false
        type: number
        default: 27017
      


jobs:
  test_coverage:
    runs-on: ubuntu-latest
    container: python:3.12

    services:
      mongodb:
        image: ${{ inputs.uses-mongo && format('mongo:{0}', inputs.mongo-version) }}
        ports:
          - ${{ format('{0}:{1}', inputs.mongo-port, inputs.mongo-port) }}
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies with Poetry
        run: |
          cd ./service/${{ inputs.service-project-dir }}
          poetry install
          poetry add pytest-cov
      
      - name: Install motor
        if: ${{ inputs.uses-mongo }}
        run: pip install motor  # Install pymongo to test the connection

      - name: Test mongodb connection
        if: ${{ inputs.uses-mongo }}
        run: |
          python -c "
          from motor.motor_asyncio import AsyncIOMotorClient
          client = AsyncIOMotorClient("mongodb://localhost:${{ inputs.mongo-port }}")
          await client.admin.command('ping')
          "

      - name: Run Pytest with coverage
        run: |
          cd ./service/${{ inputs.service-project-dir }}/${{ inputs.test-dir }}
          export PYTHONPATH=$(pwd)
          poetry run pytest --cov=service --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=report.xml

      - name: Upload test results
        if: always() # Forces run even if previous test step fails
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: ./service/${{ inputs.service-project-dir }}/report.xml
